// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id String @id @default(uuid())
  name String?
  email String @unique
  image String?
  role UserRole @default(USER)
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems Problem[]
  submissions Submission[]
}


model Problem {
  id String @id @default(uuid())
  title String
  description String
  difficulty Difficulty
  tags String[]
  userId String
  examples Json
  constraints String
  hints String?
  editorial String?
  testCases Json      //For eg- {Input: String, Output: String}[]
  codeSnippets Json
  refrenceSolutions Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


user User @relation(fields: [userId],references: [id], onDelete: Cascade)

submissions Submission[]

}

model Submission {
  id String @id @default(uuid())
  userId String
  problemId String
  sourceCode Json
  language String
  stdin String?
  stdout String?
  stderr String?
  compileOutput String?
  status String // [Accepted, Wrong Answer, Time Limit Exceeded, Runtime Error, Compilation Error]
  memory String?
  time String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)


  testCases TestCaseResults[]
}


model TestCaseResults {
  id String @id @default(uuid())
  submissionId String
  testCase Int
  passed Boolean
  stdout String?
  stderr String?
  expected String
  memory String?
  time String?
  compileOutput String?
  status String // [Accepted, Wrong Answer, Time Limit Exceeded, Runtime Error, Compilation Error]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}